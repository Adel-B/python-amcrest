#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# vim:sw=4:ts=4:et

import argcomplete
import argparse

from amcrest import AmcrestCamera


def main():
    parser = argparse.ArgumentParser(
        description='Command line interface for Amcrest cameras.',
        formatter_class=argparse.RawTextHelpFormatter
    )

    parser.add_argument('-H', '--hostname',
                        dest='hostname',
                        help='hostname or ip address for Amcrest camera')

    parser.add_argument('-u',
                        '--username',
                        dest='username',
                        help='username for Amcrest camera')

    parser.add_argument('-p',
                        '--password',
                        dest='password',
                        help='password for Amcrest camera')

    parser.add_argument('-P',
                        '--port',
                        dest='port',
                        default=80,
                        help='port to Amcrest camera. Default: 80')

    parser.add_argument('--general-config',
                        action='store_true',
                        help='general configuration')

    parser.add_argument('--software-information',
                        action='store_true',
                        help='software information')

    parser.add_argument('--device-type',
                        action='store_true',
                        help='device type')

    parser.add_argument('--hardware-version',
                        action='store_true',
                        help='hardware version')

    parser.add_argument('--snapshot',
                        dest='snapshot_option',
                        default='0',
                        nargs='?',
                        const='0',
                        help='get snapshot, use 0, 1 or 2\n'
                             '0 - regular snapshot\n'
                             '1 - motion detection snapshot\n'
                             '2 - alarm snapshot')

    parser.add_argument('--network-interfaces',
                        action='store_true',
                        help='Get network interfaces')

    parser.add_argument('--version-http-api',
                        action='store_true',
                        help='Get version of HTTP API')

    parser.add_argument('--scan-devices',
                        dest='scan_devices',
                        help='scan Amcrest cameras in the subnet provided\n'
                             'i.e: 192.168.1.0/24')

    parser.add_argument('--timeout',
                        dest='timeout',
                        type=int,
                        const=None,
                        help='set timeout for operations like\n'
                             ' scan-devices')

    parser.add_argument('--current-time',
                        nargs='?',
                        const=-1,
                        help='camera current time')

    parser.add_argument('--motion-detection',
                        nargs='?',
                        const=-1,
                        help='enable/disable motion detection (True or False)')

    parser.add_argument('--network-config',
                        nargs='?',
                        const=-1,
                        help='network configuration')

    parser.add_argument('--snapshot-config',
                        nargs='?',
                        const=-1,
                        help='get snapshot configuration')

    parser.add_argument('--output',
                        dest='output',
                        help='set output file name for operations\n'
                             ' like snapshot')

    argcomplete.autocomplete(parser)
    args = parser.parse_args()

    amcrest = AmcrestCamera(
        args.hostname,
        args.port,
        args.username,
        args.password
    )
    camera = amcrest.camera
    if args.scan_devices:
        ret = camera.scan_devices(args.scan_devices, args.timeout)
        if ret:
            print(("Looks like amcrest device: {0}".format(ret)))
        else:
            print("No devices found, try again later!")
        return

    if args.username and args.hostname and args.password:
        if args.general_config:
            print((camera.general_config))

        elif args.device_type:
            print((camera.device_type))

        elif args.hardware_version:
            print((camera.hardware_version))

        elif args.version_http_api:
            print((camera.version_http_api))

        elif args.software_information:
            print((camera.software_information))

        elif args.network_config:
            print((camera.network_config))

        elif args.network_interfaces:
            print((camera.network_interfaces))

        elif args.current_time == -1:
            print((camera.current_time))

        elif args.motion_detection == -1:
            print((camera.motion_detection))

        elif args.motion_detection:
            camera.motion_detection = args.motion_detection

        elif args.current_time is not None:
            camera.current_time = args.current_time

        elif args.snapshot_config:
            print((camera.snapshot_config))

        elif args.snapshot_option:
            if args.output:
                camera.snapshot(args.snapshot_option, args.output)
            else:
                print("This option requires --output")
    else:
        print('Error: You must specify a valid operation. See usage:')
        parser.print_usage()

if __name__ == '__main__':
    main()
